% Go to directory with sub-directories for each of the subjects. 
% 'dir' function will find each sub-directory or file that matches the search 
% term/ wildcards (i.e. sub-CC) and creates a structure where the 1st column 
% will be the name of the directory/ file. 
% Thus lines 10-12 generate a cell array of all subject sub-directories i
% in the main analysis directory. 
% Row 109 is excluded because not all data is available for this participant.

clear
cd ''; 
subs = struct2cell(dir("sub-CC*")).';
subs = subs([1:108,110:end],1);

% create variable reflecting number of subjects to be analysed
num_sub = length(subs);

% Following part of script is adapted SPM batch script to generate
% voxel-displacement maps for each participant from field maps, realign and
% unwarping (using VDMs) of EPI, and segment anatomical volume for each participant
% (in native and dartel format, c1-6 and rc1-6 respectively) in preperation 
% for dartel template creation.

parfor z = 1:num_sub   % parfor runs for loop but sends each iteration of loop 
                       % to a different core on workstation, 
                       % so multiple loops can be run in parallel. Will run
                       % through for length of num_sub

%start the diary function - saves all output in the command window to a
%text file, so we can get an output file for how the preprocessing
%proceeds for each subject - in case something goes wrong we can track
%what/ what participant. First thing displayed on command window is date/
%time - disp(datestr(now))
    
    cd 'C:...\Raw_data';
    diary_name = strcat(subs{z},'_diary.txt'); 
    diary(diary_name)
    disp(datestr(now))

    % generate file paths to pass in to input structure for SPM job manager
    % epi = EPI/ function volumes, anat = anatomical scan, phase and
    % magnitude are two images generated by field mapping and used to
    % calculate the VDMs
    epi = cellstr(strcat('C:...', subs{z}, '\', subs{z}, '_epi_rest.nii'));
    anat = cellstr(strcat('C:...', subs{z}, '\', subs{z}, '_T1w.nii'));
    phase = cellstr(strcat('C:...', subs{z}, '\', subs{z}, '_fmap.nii'));
    magnitude = cellstr(strcat('C:...', subs{z}, '\', subs{z}, '_run-01_fmap.nii'));
    
    % generates the 'inputs' structure to pass in to SPM job manager -
    % these inputs fill out the <UNDEFINED> sections in the '_job.m' files
    % specified by 'jobfile'

    jobfile = {'C:...\vdm_realunwarp_coreg_segment_job2.m'};
    jobs = repmat(jobfile, 1, 1);
    inputs = cell(5, 1);
    inputs{1, 1} = phase; % Calculate VDM: Phase Image - cfg_file
    inputs{2, 1} = magnitude; % Calculate VDM: Magnitude Image - cfg_files
    inputs{3, 1} = epi; % Calculate VDM: Select EPI to Unwarp - cfg_files
    inputs{4, 1} = epi; % Realign & Unwarp: Images - cfg_files
    inputs{5, 1} = anat; % Segment: Volumes - cfg_files
    % initialise spm with defaults for FMRI processing
    spm('defaults', 'FMRI');
    % send job to the spm jobmanager - 'run' the job with specified info.
    spm_jobman('run', jobs, inputs{:});
    % switches diary off - stops recording command window output one the
    % job is finished for that participant
    diary off
end
    
% This part of the script runs the dartel template creation, it takes the
% segmented anatomical scan (rc1-6, 1-3 being GM, WM and CSF segments
% respectively. 4-6 skull, soft tissue and air) and morphs each tissue 
% class for each particpant over 6 iterations to bring them in to as close
% alignment as possible - creating 6 templates - each progressively less
% 'fuzzy' as the scans for each of the particpants comes in to closer
% alignment. This process also creates a flow field for each particpant - a
% set of warps that will bring that participants scans into alignment with 
% the 6th template. Therefore, you can apply these warps to any scan from
% the participant to normalise them to a group norm 
% i.e. the EPI data for that particpant

% create a new diary output file for the template creation process - in
% this case all the subjects data is processed simultaneously so no parfor
% loop is necessary and one diary is needed for the whole process
    
    cd 'C:...';
    diary_name = 'diary_template.txt';
    diary(diary_name)
    disp(datestr(now))

% generate a list of all file locations for each participant/ segment
    cd 'C:...\Raw_data';
    rc1_list = struct2cell(dir('**\rc1*.nii')).';
    rc1 = cellstr(fullfile(rc1_list(:,2), '\', rc1_list(:,1)));
    rc2_list = struct2cell(dir('**\rc2*.nii')).';
    rc2 = cellstr(fullfile(rc2_list(:,2), '\', rc2_list(:,1)));
    rc3_list = struct2cell(dir('**\rc3*.nii')).';
    rc3 = cellstr(fullfile(rc3_list(:,2), '\', rc3_list(:,1)));
    rc4_list = struct2cell(dir('**\rc4*.nii')).';
    rc4 = cellstr(fullfile(rc4_list(:,2), '\', rc4_list(:,1)));
    rc5_list = struct2cell(dir('**\rc5*.nii')).';
    rc5 = cellstr(fullfile(rc5_list(:,2), '\', rc5_list(:,1)));
    rc6_list = struct2cell(dir('**\rc6*.nii')).';
    rc6 = cellstr(fullfile(rc6_list(:,2), '\', rc6_list(:,1)));
    
    %input each list of files for each segment type in to the 'inputs'
    %structure to fill out the <UNDEFINED> in the '_job.m' script.
    
    jobfile = {'C:...\dartel_template_creation2_job.m'};
    jobs = repmat(jobfile, 1, 1);
    inputs = cell(6, 1);
    inputs{1, 1} = rc1; % Run Dartel (create Templates): Images - cfg_files
    inputs{2, 1} = rc2; % Run Dartel (create Templates): Images - cfg_files
    inputs{3, 1} = rc3; % Run Dartel (create Templates): Images - cfg_files
    inputs{4, 1} = rc4; % Run Dartel (create Templates): Images - cfg_files
    inputs{5, 1} = rc5; % Run Dartel (create Templates): Images - cfg_files
    inputs{6, 1} = rc6; % Run Dartel (create Templates): Images - cfg_files

    spm('defaults', 'FMRI');
    spm_jobman('run', jobs, inputs{:});

diary off

% This part of the script takes the generated flow fields (flow) for each participant
% and runs dartel normalisation on whatever files we want - in this case
% the GM/ WM/ CSF segments for each particpant (rc1-3_2), the anatomical scan 
% for each particpant (anat_2) and the unwarped/ realigned EPI images
% (epi_2). Because we apply this dartel normalisation to each particpant
% independently the parfor loop comes back. The dartel nomalisation process
% also needs the template6 generated in the previous step (temp6) -
% tamplate 6 by default is saved in the directory for the first subject
% in the list (sorted alphabetically) where their anatomical scans are
% located

parfor z = 1:num_sub  
    
    temp6 = cellstr('C:...\Template_6.nii');

        cd 'C:...\Raw_data';
        diary_name = strcat(subs{z},'_diary_normalisation.txt'); 
        diary(diary_name)
        disp(datestr(now))
        
        rc1_2 = cellstr(strcat('C:...', subs{z}, '\rc1', subs{z}, '_T1w.nii'));
        rc2_2 = cellstr(strcat('C:...', subs{z}, '\rc2', subs{z}, '_T1w.nii'));
        rc3_2 = cellstr(strcat('C:...', subs{z}, '\rc3', subs{z}, '_T1w.nii'));
        anat_2 = cellstr(strcat('C:...', subs{z}, '\', subs{z}, '_T1w.nii'));
        epi_2 = cellstr(strcat('C:...', subs{z}, '\u', subs{z}, '_epi_rest.nii'));
        flow = cellstr(strcat('C:...', subs{z}, '\u_rc1', subs{z}, '_T1w_Template.nii'));
        
        jobfile = {'C:...\dartel_normalisation_job.m'};
        jobs = repmat(jobfile, 1, 1);
        inputs = cell(11, 1);
        for crun = 1
            inputs{1, 1} = temp6; % Normalise to MNI Space: Dartel Template - cfg_files
            inputs{2, 1} = flow; % Normalise to MNI Space: Flow Field - cfg_files
            inputs{3, 1} = anat_2; % Normalise to MNI Space: Images - cfg_files
            inputs{4, 1} = flow; % Normalise to MNI Space: Flow Field - cfg_files
            inputs{5, 1} = rc1_2; % Normalise to MNI Space: Images - cfg_files
            inputs{6, 1} = flow; % Normalise to MNI Space: Flow Field - cfg_files
            inputs{7, 1} = rc2_2; % Normalise to MNI Space: Images - cfg_files
            inputs{8, 1} = flow; % Normalise to MNI Space: Flow Field - cfg_files
            inputs{9, 1} = rc3_2; % Normalise to MNI Space: Images - cfg_files
            inputs{10, 1} = flow; % Normalise to MNI Space: Flow Field - cfg_files
            inputs{11, 1} = epi_2; % Normalise to MNI Space: Images - cfg_files
        end
            spm('defaults', 'FMRI');
            spm_jobman('run', jobs, inputs{:});
            
        diary off
end
